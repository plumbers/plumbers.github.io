user deployer;
daemon off;
worker_processes 1;

error_log  /usr/repo/plumbers.github.io/logs/nginx_error.log;

events {
    worker_connections  1024;
}

http {

  server {
      #listen 4002 ssl;
      server_name _;#127.0.0.1; #1b13ed59.ngrok.io www.1b13ed59.ngrok.io;
      #return 301 https://$host$request_uri;
      #return 301 https://127.0.0.1:4002$request_uri;

    listen 4002 http2 ssl;
    listen [::]:4002 http2 ssl;
    #server_name 2f375265.ngrok.io  www.2f375265.ngrok.io;

    access_log  /usr/repo/plumbers.github.io/logs/host.access.log;

    charset utf-8;
    override_charset on;
    source_charset utf-8;

    #ssl on;
    #ssl_certificate /etc/nginx/ssl/domain.crt;
    #ssl_certificate_key /etc/nginx/ssl/domain.key;
    #ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    ssl_certificate /etc/ssl/nginx/nginx.crt;
    ssl_certificate_key /etc/ssl/nginx/nginx.key;
    #ssl_dhparam /etc/ssl/certs/dhparam.pem;

    ssl_prefer_server_ciphers On;
    #ssl_protocols TLSv1.1 TLSv1.2;
    # enables SSLv3/TLSv1, but not SSLv2 which is weak and should no longer be used.
    ssl_protocols SSLv3 TLSv1.1 TLSv1.2;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK;
    # disables all weak ciphers
    #ssl_ciphers ALL:!aNULL:!ADH:!eNULL:!LOW:!EXP:RC4+RSA:+HIGH:+MEDIUM;
    add_header Strict-Transport-Security max-age=15768000;
    ssl_stapling on;


    location / {
        root /usr/repo/plumbers.github.io/site;

        #index  index.html index.htm;
        #            proxy_set_header X-Real-IP $remote_addr;
        #            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #            proxy_set_header X-NginX-Proxy true;
        #            proxy_ssl_session_reuse off;
        #            proxy_set_header Host $http_host;
        #            proxy_cache_bypass $http_upgrade;
        #            proxy_redirect off;
    }

    location /beer {
        root /usr/repo/plumbers.github.io/build;
        #try_files $uri $uri/;
        proxy_pass http://localhost:8080/beer;
    }

		location /ddg {
						return 301 https://www.duckduckgo.com;
		} # And now you can visit http://s.ynonperek.com/ddg to reach duckduckgo.
  }

  server_tokens off;
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 15;
  types_hash_max_size 2048;
  include /etc/nginx/mime.types;
  default_type application/octet-stream;
  access_log on;
  error_log on;
  #include /etc/nginx/conf.d/*.conf;
  #include /etc/nginx/sites-enabled/*;
  open_file_cache max=100;

    server_names_hash_bucket_size 128;

  # serve pre-gziped files
	gzip_static always;
	# Enable static gzip
	#gzip_static on;

    #gzip off;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/x-font-ttf font/opentype image/svg+xml image/x-icon;

    # read more here http://tautt.com/best-nginx-configuration-for-security/

    # don't send the nginx version number in error pages and Server header
    #server_tokens off;

    # config to don't allow the browser to render the page inside an frame or iframe
    # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
    # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    add_header X-Frame-Options SAMEORIGIN;

    # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
    # to disable content-type sniffing on some browsers.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
    # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
    # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
    add_header X-Content-Type-Options nosniff;

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block";

        ##
        # Security
        ##
        #server_tokens off;
        add_header Access-Control-Allow-Origin '*';
        # Warning always show on Google Chrome... i don't know how fix it.
        # add_header X-XSS-Protection "1; mode=block";

        # Google, facebook, zendesk, font-awesome etc.
        #add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net cdn.ckeditor.com; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com cdn.ckeditor.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://assets.zendesk.com maxcdn.bootstrapcdn.com cdn.ckeditor.com; font-src 'self' https://themes.googleusercontent.com maxcdn.bootstrapcdn.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";

        # server_names_hash_bucket_size 64;
        # server_name_in_redirect off;


    # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
    # you can tell the browser that it can only download content from the domains you explicitly allow
    # http://www.html5rocks.com/en/tutorials/security/content-security-policy/
    # https://www.owasp.org/index.php/Content_Security_Policy
    # I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
    # directives for css and js(if you have inline css or js, you will need to keep it too).
    # more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://themes.googleusercontent.com; frame-src https://www.facebook.com https://s-static.ak.facebook.com object-src 'none'";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net cdn.ckeditor.com; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com cdn.ckeditor.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://assets.zendesk.com maxcdn.bootstrapcdn.com cdn.ckeditor.com; font-src 'self' https://fonts.gstatic.com https://themes.googleusercontent.com maxcdn.bootstrapcdn.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";

    # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    # also https://hstspreload.org/
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";

}



#map $sent_http_content_type $expires {
#    default                     off;
#    text/html                   epoch;
#    text/css                    max;
#    application/javascript      max;
#    application/x-font-ttf      max;
#    application/x-font-otf      max;
#    application/font-woff       max;
#    application/font-woff2      max;
#    ~image/                     max;
#}
